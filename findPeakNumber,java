// Time Complexity: O(log N)
// Space Complexity: O(1)

// Did this run on leetcode: Yes
// Any Issues you faced while coding this: No

// Explaination

class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0; 
        int high = nums.length - 1;

        while(low <= high) {
            int mid = low + (high - low) / 2;
            // Here we can check peak element by checking it's neighbors if the peak number is greater than neighbors
            // So we found the element
            if((mid == 0 || nums[mid] > nums[mid - 1]) && (mid == nums.length - 1 || nums[mid] > nums[mid + 1])) {
                return mid;
            } 
            // Check where the slope climb
            // Meaning if the next number to current number is greater for sure i will find my number
            else if (nums[mid] < nums[mid + 1]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return -1;
    }
}